---
description: 
globs: 
---
# MessagePusher 项目规范

本文档定义了 MessagePusher 项目的开发规范和流程，所有参与项目的开发者都应遵循这些规则。

## 代码风格规范

### Python 代码规范

1. **PEP 8 规范**：所有 Python 代码必须遵循 [PEP 8](mdc:https:/www.python.org/dev/peps/pep-0008) 编码规范
2. **命名规范**：
   - 类名使用 `CamelCase` 命名法
   - 函数和变量使用 `snake_case` 命名法
   - 常量使用 `UPPER_CASE` 命名法
   - 私有方法和变量以单下划线 `_` 开头
3. **注释规范**：
   - 所有函数和类必须有文档字符串 (docstring)，说明其功能、参数和返回值
   - 复杂逻辑必须添加适当的注释
   - 使用中文注释，保持语言一致性
4. **导入规范**：
   - 导入顺序：标准库 > 第三方库 > 本地模块
   - 每组导入之间空一行
   - 不使用 `from module import *` 的导入方式

### 前端代码规范

1. **HTML/CSS 规范**：
   - 使用 4 空格缩进
   - 类名使用小写字母和连字符 (kebab-case)
   - 保持 HTML 结构清晰，适当使用注释标记区块
2. **JavaScript 规范**：
   - 使用 ES6+ 语法
   - 变量使用 camelCase 命名法
   - 常量使用 UPPER_CASE 命名法
   - 适当添加注释说明功能

## 版本控制规范

### Git 工作流

1. **分支管理**：
   - `main` 分支：稳定版本，只接受合并请求
   - `develop` 分支：开发分支，功能完成后合并到此分支
   - 功能分支：以 `feature/` 开头，如 `feature/telegram-channel`
   - 修复分支：以 `fix/` 开头，如 `fix/api-auth-bug`
   - 发布分支：以 `release/` 开头，如 `release/v1.0.0`

2. **提交信息规范**：
   - 格式：`<类型>: <描述>`
   - 类型包括：
     - `feat`：新功能
     - `fix`：修复 bug
     - `docs`：文档更新
     - `style`：代码风格修改（不影响功能）
     - `refactor`：代码重构
     - `test`：测试相关
     - `chore`：构建过程或辅助工具变动
   - 描述使用中文，简明扼要地说明本次提交的内容

3. **合并请求流程**：
   - 创建合并请求前先确保代码通过所有测试
   - 合并请求标题遵循提交信息规范
   - 合并请求描述中详细说明变更内容和测试结果
   - 至少需要一名其他开发者审核通过后才能合并

## 开发流程规范

### 功能开发流程

1. **需求分析**：
   - 在开始编码前，确保完全理解需求
   - 如有疑问，及时与团队讨论澄清

2. **任务分解**：
   - 将大功能分解为小任务
   - 每个任务应该是可独立完成和测试的

3. **编码实现**：
   - 遵循代码规范进行编码
   - 编写单元测试，确保代码质量
   - 定期提交代码，避免大量改动一次提交

4. **代码审核**：
   - 提交合并请求前自我审核代码
   - 确保代码符合项目规范
   - 接受并积极回应审核意见

5. **测试验证**：
   - 确保所有单元测试通过
   - 进行功能测试，验证功能是否符合需求
   - 修复测试中发现的问题

### Bug 修复流程

1. **问题复现**：
   - 详细记录复现步骤
   - 确定问题的根本原因

2. **修复实现**：
   - 创建修复分支
   - 实现修复方案
   - 添加测试用例，防止问题再次出现

3. **验证修复**：
   - 确保修复有效
   - 确保没有引入新的问题
   - 提交合并请求

## 测试规范

1. **单元测试**：
   - 所有核心功能必须有单元测试
   - 测试覆盖率应达到 80% 以上
   - 使用 pytest 框架进行测试

2. **集成测试**：
   - 针对模块间交互进行测试
   - 确保各模块能够协同工作

3. **功能测试**：
   - 验证功能是否符合需求
   - 测试各种边界条件和异常情况

## 文档规范

1. **代码文档**：
   - 所有公共 API 必须有完整的文档
   - 复杂算法和逻辑必须有详细说明

2. **项目文档**：
   - 保持 README.md 文件的更新
   - 提供完整的安装和使用说明
   - 记录重要的设计决策和架构信息

3. **变更文档**：
   - 维护 CHANGELOG.md 文件
   - 记录每个版本的变更内容

## 发布规范

1. **版本号规范**：
   - 遵循语义化版本 [SemVer](mdc:https:/semver.org/lang/zh-CN) 规范
   - 格式：`主版本号.次版本号.修订号`
   - 主版本号：不兼容的 API 变更
   - 次版本号：向下兼容的功能性新增
   - 修订号：向下兼容的问题修正

2. **发布流程**：
   - 从 develop 分支创建 release 分支
   - 在 release 分支上进行最终测试和修复
   - 合并到 main 分支并打标签
   - 更新 CHANGELOG.md 文件
   - 发布版本

## 安全规范

1. **敏感信息处理**：
   - 不在代码中硬编码敏感信息（如密钥、密码）
   - 使用环境变量或配置文件存储敏感信息
   - 确保敏感信息不被提交到版本控制系统

2. **输入验证**：
   - 所有用户输入必须经过验证和清洗
   - 防止 SQL 注入、XSS 等常见安全问题

3. **权限控制**：
   - 实施最小权限原则
   - 确保用户只能访问其有权限的资源

## 性能规范

1. **代码效率**：
   - 避免不必要的计算和内存使用
   - 优化循环和数据结构

2. **数据库操作**：
   - 优化数据库查询
   - 适当使用索引
   - 避免 N+1 查询问题

3. **资源管理**：
   - 及时释放不再使用的资源
   - 避免内存泄漏

## 项目管理工具

1. **问题跟踪**：
   - 使用 GitHub Issues 跟踪问题和任务
   - 为问题添加适当的标签和里程碑

2. **项目看板**：
   - 使用 GitHub Projects 管理开发进度
   - 将任务分为待办、进行中、已完成等状态

3. **持续集成**：
   - 使用 GitHub Actions 进行持续集成
   - 自动运行测试和代码质量检查

## 沟通规范

1. **团队沟通**：
   - 定期进行团队会议，讨论进度和问题
   - 使用 GitHub Discussions 进行异步讨论

2. **问题报告**：
   - 报告问题时提供详细的复现步骤
   - 附上相关的日志和截图

3. **知识共享**：
   - 记录解决方案和经验
   - 更新项目 Wiki，分享有用的信息 